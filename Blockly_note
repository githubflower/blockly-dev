11-07
1.熟悉Blockly代码中category、block的定义, 通过加载自定义js的方式能正常显示自定义block；
2.搭建调试的环境，跟踪blockly源码，找到创建图形块的代码并开始学习；

TopRow: corners, hats, spacers, and previous connections.

指令	A (绝对) a (相对)
名称	elliptical arc 椭圆弧
参数	
(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+
rx ry 是椭圆的两个半轴的长度。
x-axis-rotation 是椭圆相对于坐标系的旋转角度，角度数而非弧度数。
large-arc-flag 是标记绘制大弧(1)还是小弧(0)部分。
sweep-flag 是标记向顺时针(1)还是逆时针(0)方向绘制。
x y 是圆弧终点的坐标。
描述	从当前点绘制一段椭圆弧到点 (x, y)，椭圆的大小和方向由 (rx, ry) 和 x-axis-rotation 参数决定， x-axis-rotation 参数表示椭圆整体相对于当前坐标系统的旋转角度。椭圆的中心坐标 (cx, cy) 会自动进行计算从而满足其它参数约束。large-arc-flag 和 sweep-flag 也被用于圆弧的计算与绘制。
原文链接：https://blog.csdn.net/cuixiping/article/details/79663611

11-08
1.查看blockly源码get到修改block的UI显示的方法（参考core/renderers/common/drawer.js    Blockly.blockRendering.Drawer.prototype.drawTop_, drawBotton, drawLeft等方法，熟悉常用的svg path方法即可自己修改）
2.TODO: 需查看connection模块源码后思考如何标记不同类型的block以及block的可输入、可输出、可连线标记；
3.TODO: 查看drag模块源码 思考如何处理原来的模块粘在一起的情况、drag的同时自动连线、以及连线自动调整；

11-09
block   上面的帽子（凸起）和下面的凹槽表示代码的连接，保证块和块之间代码解析的顺序（如果未连接在一起则会按照从上到下，从左到右的优先级顺序解析）；
        左边的凸起和右边的凹槽表示这个块的输入和输出，左边的凸起表示当前块的结果可以输入给其他块，右边凹槽表示当前块需要接收外部参数；
        loop类的块同时具有外部输入、外部输出、承上启下的连接，其他类可以大致分为2类（输入输出类Block + 承上启下类Block）
理清了循环块和函数块中statement的绘制，可以对statement的UI自定义修改
今日计划： 看一下statement的路径绘制和输入输出的粘连
周日计划： 思考自定义连线的实现方式

11-11
[master cdb2b3c] 调试看了一下connection连接然后更新上下block的代码，还未完全弄清楚这里面的事件，思考了连线的实现（最好是自定义1个连线的Block）

11-12
查看源码，将箭头作为承上启下的block进行绘制，将上下块连接的凹口居中放置，


11-14
理清以弹窗形式定义一个Number型变量的思路并开始编码，对需要确认的UI和交互记录了一点；
blockly的思想是一切皆block，有点类似vue的一切皆组件的思想，具体思路：
1.创建按钮block-可继承icon类或参考field_variable
2.创建form-win表单类block-可参考dropdown或者mutator类；
3.创建变量block
事件部分参考blockly.js和gesture.js

11-28
重新设计if-elseif-else模块的绘制和size计算
目前if...else的block的绘制直接一步完成，没有T-R-B-L的概念，不太好 （自定义将菱形和else分支短横线放在topRow中实现会更好，这样将不需要另外处理block的size问题
controls_if 模块的width和widthWithChildren应该是一样的，应该这样计算：   statement 即 connectedBlock
分成左右2块   左边取Math.max(statement_if.previousConnection.x, this.constans_.DIAMOND_LONG)
             右边取Math.max(this.constans_.DIAMOND_LONG + this.constans_.LINE_ELSE_H, statement_if.width - x)
             else模块同理


12.3
path 路径结束后是会根据fill的值填充整个模块的，有时候我们不想让他填充某些特定区域，该如何做？
方法1：使用L,H,V等命令后沿原路径返回到起点；
方法2：使用m 0 0   m 0 0 这个命令相当于将路径分割成了n个线段，这样只有一条直线自然就不会闭合了

在block中自定义加入了rect元素，但是每次重绘的时候就会产生脏数据（原先生成的rect没有删除且又新增了1个rect），将rect挂载到block上可以解决此问题

12.19
blockly主题有4个  core/theme/*
主题在html页面中 demos/code/code.js 创建workspace时传入，如果没有传入则默认采用Classic主题  Code.workspace = Blockly.inject(xx, {theme: xxx})
在en.js等资源文件中有对toolbox的配色进行覆盖，这里面有2个问题：
1.资源中设置各个block颜色的字段和主题文件中的字段不是一一对应的关系，这点没设计好，也有可能是写demo页面的人没注意统一；
2.对主题的颜色覆盖放在资源文件中一定是一个糟糕的设计；
blockly对主题的设计是通过js将主题配置注入到行内属性；这种做法有1个大的缺陷就是不方便主题热替换，替换完必须刷新页面才有效果，如果设计成类名+css控制会更灵活；


ps:  http://big.xiazaicc.com/bigfile/200/pscs664wei_downcc.com.zip


